// Code generated by MockGen. DO NOT EDIT.
// Source: ./contracts.go

// Package hash is a generated GoMock package.
package hash

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockProvider) Check(ciphertext, plaintext, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", ciphertext, plaintext, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockProviderMockRecorder) Check(ciphertext, plaintext, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockProvider)(nil).Check), ciphertext, plaintext, key)
}

// Decrypt mocks base method.
func (m *MockProvider) Decrypt(ciphertext, key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", ciphertext, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockProviderMockRecorder) Decrypt(ciphertext, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockProvider)(nil).Decrypt), ciphertext, key)
}

// Encrypt mocks base method.
func (m *MockProvider) Encrypt(plaintext, key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", plaintext, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockProviderMockRecorder) Encrypt(plaintext, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockProvider)(nil).Encrypt), plaintext, key)
}

// NewJwt mocks base method.
func (m *MockProvider) NewJwt(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewJwt", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewJwt indicates an expected call of NewJwt.
func (mr *MockProviderMockRecorder) NewJwt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewJwt", reflect.TypeOf((*MockProvider)(nil).NewJwt), arg0)
}

// ValidateJwt mocks base method.
func (m *MockProvider) ValidateJwt(token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateJwt", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateJwt indicates an expected call of ValidateJwt.
func (mr *MockProviderMockRecorder) ValidateJwt(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateJwt", reflect.TypeOf((*MockProvider)(nil).ValidateJwt), token)
}
